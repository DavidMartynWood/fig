@using Zxcvbn
<RadzenPassword @oninput="p => PasswordChanged(p.Value.ToString())" Placeholder="@Placeholder" Class="w-100 p-1"/>
<div>
    @if (PasswordStrength == 0)
    {
        <RadzenBadge BadgeStyle="BadgeStyle.Danger" Text="Terrible"/>
    }
    else if (PasswordStrength == 1)
    {
        <RadzenBadge BadgeStyle="BadgeStyle.Danger" Text="Poor"/>
    }
    else if (PasswordStrength == 2)
    {
        <RadzenBadge BadgeStyle="BadgeStyle.Primary" Text="Average"/>
    }
    else if (PasswordStrength == 3)
    {
        <RadzenBadge BadgeStyle="BadgeStyle.Warning" Text="Good"/>
    }
    else if (PasswordStrength == 4)
    {
        <RadzenBadge BadgeStyle="BadgeStyle.Success" Text="Excellent"/>
    }
</div>

<p style="white-space: pre-wrap">@_crackableMessage</p>

@code {
    public int PasswordStrength { get; set; } = -1;

    [Parameter]
    public Action<string> OnValidPassword { get; set; }

    [Parameter]
    public Action<string> OnInvalidPassword { get; set; }

    [Parameter]
    public int MinimumScore { get; set; }

    [Parameter]
    public string Placeholder { get; set; } = string.Empty;

    private string _crackableMessage { get; set; }

    public void ResetPasswordInformation()
    {
        PasswordStrength = -1;
        _crackableMessage = string.Empty;
    }

    private void PasswordChanged(string password)
    {
        if (string.IsNullOrEmpty(password))
        {
            ResetPasswordInformation();
            return;
        }

        if (ValidatePassword(password))
            OnValidPassword(password);
        else
            OnInvalidPassword(password);
    }

    private bool ValidatePassword(string password)
    {
        var result = Core.EvaluatePassword(password);
        PasswordStrength = result.Score;
        _crackableMessage = $"Crackable in {result.CrackTimeDisplay.OfflineSlowHashing1e4PerSecond}";

        return result.Score >= MinimumScore;
    }


}