@using Fig.Web.Models.Setting
@if (SettingClients == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="container p-0">
        <div class="row">
            <div class="col-md-auto">
                <RadzenListBox AllowFiltering="true" @bind-Value=@SelectedSettingClient FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                               TValue="SettingClientConfigurationModel" Data=@FilteredSettingClients TextProperty="DisplayName"
                               LoadData=@OnFilter
                               Class="w-100 p-3" style="height: 100%; min-height: calc(100vh - 120px)">
                    <Template>
                        <div class="d-flex">
                            <div class="p-1">
                                @if (((SettingClientConfigurationModel)context).CurrentRunSessions == 0)
                                {
                                    <RadzenBadge Text="@(((SettingClientConfigurationModel)context).CurrentRunSessions.ToString())" 
                                                 IsPill="true" BadgeStyle="BadgeStyle.Primary"/>
                                }
                                else
                                {
                                    <RadzenBadge Text="@(((SettingClientConfigurationModel)context).CurrentRunSessions.ToString())" 
                                                 IsPill="true" BadgeStyle="BadgeStyle.Light"/>
                                }

                            </div>
                            <div class="flex-grow-1 p-1" data-test-id="@(((SettingClientConfigurationModel)context).DisplayName)">
                                @(((SettingClientConfigurationModel)context).DisplayName)
                            </div>
                            <div class="p-1">
                                @if (((SettingClientConfigurationModel)context).DirtySettingCount > 0)
                                {
                                    <RadzenBadge Text="@(((SettingClientConfigurationModel)context).DirtySettingCount.ToString())" 
                                             IsPill="true" BadgeStyle="BadgeStyle.Success"/>
                                }
                            </div>
                            <div class="p-1">
                                @if ((((SettingClientConfigurationModel)context).HasConfigurationError))
                                {
                                    <RadzenBadge Text="!" IsPill="true" BadgeStyle="BadgeStyle.Danger"/>
                                }
                            </div>
                        </div>

                    </Template>
                </RadzenListBox>

            </div>

            <div class="col">

                <div class="d-flex justify-content-end align-items-center">
                    <div class="d-flex align-items-center">
                        <label>Advanced</label>
                    </div>
                    <div class="pl-2 d-flex align-items-center">
                        <RadzenSwitch Change=@(ShowAdvancedChanged) Name="ToggleAdvanced"/>
                    </div>
                    <div class="pl-2">
                        <RadzenButton Click=@(args => OnSave()) Text="Save" Icon="save" BusyText="Saving..." IsBusy=@_isSaveInProgress Disabled=@IsSaveDisabled ButtonStyle="ButtonStyle.Success"/>
                    </div>
                    <div class="pl-2">
                        <RadzenButton Click=@(args => OnSaveAll()) Text="Save All" Icon="backup_table" BusyText="Saving..." IsBusy=@_isSaveAllInProgress Disabled=@IsSaveAllDisabled ButtonStyle="ButtonStyle.Success"/>
                    </div>
                    <div class="pl-2">
                        <RadzenButton Click=@(args => OnAddInstance()) Text="Instance" Icon="add_circle_outline" Disabled=@IsInstanceDisabled ButtonStyle="ButtonStyle.Secondary"/>
                    </div>
                    <div class="pl-2">
                        <RadzenButton Click=@(args => OnDelete()) Text="Delete" Icon="delete" BusyText="Deleting..." IsBusy=@_isDeleteInProgress Disabled=@IsDeleteDisabled ButtonStyle="ButtonStyle.Danger"/>
                    </div>
                </div>
                
                @if (SelectedSettingClient != null)
                {
                    <div class="d-flex">
                        <div class="p-1">
                            @if (SelectedSettingClient.CurrentRunSessions == 0)
                            {
                                <RadzenBadge Text="@(SelectedSettingClient.CurrentRunSessions.ToString())" 
                                             IsPill="true" BadgeStyle="BadgeStyle.Primary"/>
                            }
                            else
                            {
                                <RadzenBadge Text="@(SelectedSettingClient.CurrentRunSessions.ToString())" 
                                             IsPill="true" BadgeStyle="BadgeStyle.Light"/>
                            }
                        </div>
                        <div class="p-1">
                            online client(s). @(SelectedSettingClient?.Settings.Count) setting(s) (@(SelectedSettingClient?.Settings.Count(a => a.Advanced)) advanced).
                        </div>
                        @if (SelectedSettingClient?.DirtySettingCount > 0)
                        {
                            <div class="p-1">
                                <RadzenBadge Text="@(SelectedSettingClient?.DirtySettingCount.ToString())" 
                                             IsPill="true" BadgeStyle="BadgeStyle.Success"/>
                            </div>
                            <div class="p-1">
                                unsaved change(s).
                            </div>
                        }
                        
                        @if (SelectedSettingClient?.HasConfigurationError == true)
                        {
                            <div class="p-1">
                                Configuration error(s) see event log for details.
                            </div>
                        }
                    
                    </div>
                    
                    @foreach (var setting in SelectedSettingClient.Settings.OrderBy(a => a.DisplayOrder).ThenBy(a => a.Name))
                    {
                        <SettingCard Setting="@setting"/>
                    }

                    @foreach (var verification in SelectedSettingClient.Verifications.OrderBy(a => a.Name))
                    {
                        <VerificationCard Verification="@verification"/>
                    }
                }
            </div>
        </div>
    </div>
}

@code {

    async Task<bool> GetDeleteConfirmation(string clientName)
    {
        return await DialogService.OpenAsync("Confirm Delete", ds =>
            @<div>
                <p class="mb-4">Are you sure you want to delete @clientName</p>
                <div class="row">
                    <div class="col">
                        <RadzenButton Text="Yes" Click="() => ds.Close(true)" Class="mr-1" Style="width: 80px;"/>
                        <RadzenButton Text="No" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Class="mr-1"/>
                    </div>
                </div>
            </div>);
    }

    async Task<bool> GetInstanceName(string clientName)
    {
        return await DialogService.OpenAsync("Name Instance", ds =>
            @<div>
                <p>Provide a name for the instance for @clientName.</p>
                <p class="mb-2">The name must match the instance provided by the requesting client.</p>
                <div class="row">
                    <RadzenTextBox @bind-Value="@_instanceName" Class="w-100 m-3"/>
                </div>
                <div class="row">
                    <div class="col">
                        <RadzenButton Text="Create Instance" Click="() => ds.Close(true)" Class="mr-1"/>
                        <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Class="mr-1"/>
                    </div>
                </div>
            </div>);
    }
    
    async Task<bool> AskUserForChangeMessage()
    {
        return await DialogService.OpenAsync("Change Message", ds =>
            @<div>
                <p>Optional message describing the change.</p>
                <div class="row">
                    <RadzenTextArea @bind-Value="@_changeMessage" Rows="3" Class="w-100 m-3"/>
                </div>
                <div class="row">
                    <div class="col">
                        <RadzenButton Text="Save" Click="() => ds.Close(true)" Class="mr-1"/>
                        <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Class="mr-1"/>
                    </div>
                </div>
            </div>);
    }

}