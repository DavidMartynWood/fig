@using Fig.Web.Models.Setting
@using Fig.Web.Models.Setting.ConfigurationModels
@using Fig.Web.Models.Setting.ConfigurationModels.DataGrid
@using Fig.Web.Services
@using Markdig
@using Fig.Contracts.Authentication
@using Fig.Web.Events
@using Microsoft.AspNetCore.Components.Web
@if (Setting.IsCompactView)
{
    <div class="transition-visible @(Setting.Hide ? "transition-collapsed" : "show")" style="@(Setting.IsEnabledByOtherSetting ? "margin-left:10px" : "")">
        <RadzenCard class="mt-1 position-relative custom-card" Style="padding: 2px">
            <div class="colored-line" @ref="_compactCategoryLine" onmouseenter="@(() => ShowTooltip(_compactCategoryLine, @Setting.CategoryName, TooltipPosition.Right))"
                 style="background-color: @Setting.CategoryColor"></div>
            <div class="container">
                <div class="row">
                    <div class="col-md-4" style="width: 0">
                        <h3 style="margin-top: 0.5rem; margin-left: 20px" @onclick="@((args) => ToggleSettingCompactView(args))">@Setting.Name</h3>
                    </div>
                    @if (Setting.IsDirty)
                    {
                        <div class="col-md-8" style="width: 0">
                            <div style="margin-top: 0.5rem; word-wrap: break-word; font-weight: bold; white-space: pre-wrap">@Setting.GetStringValue()</div>
                        </div>
                    }
                    else
                    {
                        <div class="col-md-8" style="width: 0">
                            <div style="margin-top: 0.5rem; word-wrap: break-word; white-space: pre-wrap">@Setting.GetStringValue()</div>
                        </div>
                    }
                </div>

            </div>

        </RadzenCard>
    </div>
}
else
{
    <div class="transition-visible @(Setting.Hide ? "transition-collapsed" : "show")" style="@(Setting.IsEnabledByOtherSetting ? "margin-left:10px" : "")">
        <RadzenCard class="mt-2 position-relative custom-card">

            <div class="colored-line" @ref="_categoryLine" onmouseenter="@(() => ShowTooltip(_categoryLine, @Setting.CategoryName, TooltipPosition.Right))"
                 style="background-color: @Setting.CategoryColor"></div>
            <div class="d-flex align-items-center mb-3 card-content" id="@(Setting.Name)">

                <div class="pr-2 flex-grow-1">
                    <h2 class="mb-1" @onclick="@((args) => ToggleSettingCompactView(args))">
                        @Setting.Name<RadzenIcon Icon="bolt" IconStyle="IconStyle.Warning" Visible="@Setting.SupportsLiveUpdate" Style="font-size: 0.7em"/>
                    </h2>
                    @(Setting.Description)
                </div>

                <div class="position-absolute top-0 end-0 m-1">
                    <div class="px-1 @(Setting.LinkedVerifications.Any() ? "" : "collapse")">
                        Verified By:

                        @foreach (var verification in Setting.LinkedVerifications)
                        {
                            <RadzenBadge BadgeStyle="BadgeStyle.Success" IsPill="true" Text="@verification"/>
                        }
                    </div>
                </div>


                <div class="px-1 ms-4 @(Setting.IsGroupManaged || IsReadOnlyUser ? "collapse" : "")">
                    <RadzenButton Click="@(args => Setting.UndoChanges())" Disabled="@Setting.IsNotDirty" Icon="restart_alt"
                                  ButtonStyle="ButtonStyle.Warning" MouseEnter="@(args => ShowTooltip(args, "Undo unsaved changes"))"/>
                </div>
                <div class="px-1 @(Setting.IsGroupManaged || IsReadOnlyUser ? "collapse" : "")">
                    <RadzenButton Click="@(args => Setting.ResetToDefault())" Disabled="@Setting.ResetToDefaultDisabled" Icon="settings_backup_restore"
                                  ButtonStyle="ButtonStyle.Warning" MouseEnter="@(args => ShowTooltip(args, "Reset to default value"))"/>
                </div>
                <div class="px-1 pr-1">
                    <RadzenButton Click="@(args => Setting.ShowHistory())" Icon="history" ButtonStyle="ButtonStyle.Light"
                                  MouseEnter="@(args => ShowTooltip(args, "Toggle setting history details"))"/>
                </div>
                <div class="@(!Setting.IsDirty ? "collapse" : "")">
                    <RadzenBadge BadgeStyle="BadgeStyle.Light" Text="Modified" class="position-absolute top-0 end-0 m-1"
                                 MouseEnter="@(args => ShowTooltip(args, "This setting has unsaved changes"))"/>
                </div>
            </div>

            <div class="d-flex">
                @if (Setting is StringSettingConfigurationModel stringSetting)
                {
                    <StringSetting Setting="@stringSetting"/>
                }
                else if (Setting is IntSettingConfigurationModel intSetting)
                {
                    <IntSetting Setting="@intSetting"/>
                }
                else if (Setting is DoubleSettingConfigurationModel doubleSetting)
                {
                    <DoubleSetting Setting="@doubleSetting"/>
                }
                else if (Setting is LongSettingConfigurationModel longSetting)
                {
                    <LongSetting Setting="@longSetting"/>
                }
                else if (Setting is BoolSettingConfigurationModel boolSetting)
                {
                    <BoolSetting Setting="@boolSetting"/>
                }
                else if (Setting is DropDownSettingConfigurationModel dropDownSetting)
                {
                    <DropDownSetting Setting="@dropDownSetting"/>
                }
                else if (Setting is DataGridSettingConfigurationModel dataGridSetting)
                {
                    <DataGridSetting Setting="@dataGridSetting"/>
                }
                else if (Setting is DateTimeSettingConfigurationModel dateTimeSetting)
                {
                    <DateTimeSetting Setting="@dateTimeSetting"/>
                }
                else if (Setting is TimeSpanSettingConfigurationModel timeSpanSetting)
                {
                    <TimeSpanSetting Setting="@timeSpanSetting"/>
                }
                else if (Setting is JsonSettingConfigurationModel jsonSetting)
                {
                    <JsonSetting Setting="@jsonSetting"/>
                }
            </div>

            <div class="p-1 @(Setting.IsGroupManaged ? "" : "collapse")">
                <p>This setting is managed by <a href="" @onclick="@(() => Setting.RequestSettingClientIsShown(Setting.Group))" @onclick:preventDefault>@Setting.Group</a></p>
            </div>

            <div class="p-1 @(Setting.Parent.IsGroup ? "" : "collapse")">
                <p>
                    This setting sets the value for
                    @foreach (var groupManagedSetting in Setting.GroupManagedSettings ?? new List<ISetting>())
                    {
                        <a href="" @onclick="@(() => Setting.RequestSettingClientIsShown(groupManagedSetting.Parent.Name))" @onclick:preventDefault>
                            @groupManagedSetting.Parent.Name&nbsp;
                        </a>
                    }
                </p>
            </div>

            <div class="p-1 transition-visible @(Setting.IsHistoryVisible ? "show" : "transition-collapsed")">

                <hr/>
                <h3>History</h3>


                <div class="@(Setting.Parent.IsGroup ? "collapse" : "")">
                    <RadzenDataGrid AllowFiltering="false" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="3" AllowPaging="true"
                                    Data="@Setting.History" TItem="SettingHistoryModel" ColumnWidth="300px">
                        <Columns>
                            <Radzen.Blazor.RadzenDataGridColumn TItem="SettingHistoryModel" Property="DateTime" Title="DateTime" Frozen="true" Width="100px"/>
                            <Radzen.Blazor.RadzenDataGridColumn TItem="SettingHistoryModel" Property="Value" Title="Value" Frozen="true" Width="100px"/>
                            <Radzen.Blazor.RadzenDataGridColumn TItem="SettingHistoryModel" Property="User" Title="User" Width="100px"/>
                        </Columns>
                    </RadzenDataGrid>
                </div>

                <div class="@(Setting.Parent.IsGroup ? "" : "collapse")">
                    <RadzenTabs RenderMode="TabRenderMode.Client">
                        <Tabs>
                            @foreach (var groupManagedSetting in Setting.GroupManagedSettings ?? new List<ISetting>())
                            {
                                <RadzenTabsItem Text="@groupManagedSetting.Parent.Name">
                                    <p>This is the history for @groupManagedSetting.Name listed under @groupManagedSetting.Parent.Name</p>
                                    <RadzenDataGrid AllowFiltering="false" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="3" AllowPaging="true"
                                                    Data="@groupManagedSetting.History" TItem="SettingHistoryModel" ColumnWidth="300px">
                                        <Columns>
                                            <Radzen.Blazor.RadzenDataGridColumn TItem="SettingHistoryModel" Property="DateTime" Title="DateTime" Frozen="true" Width="100px"/>
                                            <Radzen.Blazor.RadzenDataGridColumn TItem="SettingHistoryModel" Property="Value" Title="Value" Frozen="true" Width="100px"/>
                                            <Radzen.Blazor.RadzenDataGridColumn TItem="SettingHistoryModel" Property="User" Title="User" Width="100px"/>
                                        </Columns>
                                    </RadzenDataGrid>
                                </RadzenTabsItem>
                            }
                        </Tabs>
                    </RadzenTabs>
                </div>

            </div>

        </RadzenCard>
    </div>
}

<style>
    .custom-card {
        position: relative;
        overflow: hidden; /* Hide overflow for rounded corners */
    }

    .colored-line {
        position: absolute;
        left: 0;
        top: 0;
        bottom: 0;
        width: 10px; /* Adjust the width of the colored line */
        border-top-right-radius: 4px; /* Maintain rounded corner on top right */
        border-bottom-right-radius: 4px; /* Maintain rounded corner on bottom right */
    }

    .card-content {
        padding-left: 15px; /* Adjust the padding to create space for the line */
    }
</style>

@code {

    private ElementReference _categoryLine;
    private ElementReference _compactCategoryLine;
    
    [Parameter]
    public ISetting Setting { get; set; } = null!;

    [Inject]
    private TooltipService TooltipService { get; set; } = null!;

    [Inject]
    private IAccountService AccountService { get; set; } = null!;

    [Inject]
    private IEventDistributor EventDistributor { get; set; } = null!;

    private bool IsReadOnlyUser => AccountService.AuthenticatedUser?.Role == Role.ReadOnly;

    protected override async Task OnInitializedAsync()
    {
        EventDistributor.Subscribe(EventConstants.RefreshView, StateHasChanged);
        await base.OnInitializedAsync();
    }

    private void ShowTooltip(ElementReference elementReference, string tooltipText, TooltipPosition position = TooltipPosition.Bottom)
    {
        if (string.IsNullOrWhiteSpace(tooltipText))
            return;
        
        var style = "background-color: black";
        TooltipService.Open(elementReference, tooltipText, new TooltipOptions
        {
            Style = style,
            Position = position,
            Duration = 6000,
            
        });
    }

    private void ToggleSettingCompactView(MouseEventArgs mouseEventArgs)
    {
        Setting.ToggleCompactView(mouseEventArgs.CtrlKey);
        if (mouseEventArgs.CtrlKey)
            EventDistributor.Publish(EventConstants.RefreshView);
    }
}