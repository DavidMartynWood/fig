@page "/WebHooks"
@using Fig.Web.Models.WebHooks
@using Fig.Web.Attributes
@using Fig.Contracts.WebHook
@attribute [Administrator]

<div class="col p-3">
    <div class="d-flex flex-row p-2">
        <div class="col-4">
            <h1 class="align-middle">Web Hook Clients</h1>
        </div>
        <div class="col-6"></div>
        <div class="col-2 p-2">
            <RadzenButton Text="Add Client" Click="AddClient" class="float-end"/>
        </div>

    </div>
    <div class="d-flex flex-row p-3">
        <RadzenDataGrid @ref="_webHookClientsGrid" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true"
                        PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                        Data="@WebHookClients" TItem="WebHookClientModel" LogicalFilterOperator="LogicalFilterOperator.Or"
                        AllowColumnPicking="false">
            <Columns>
                <Radzen.Blazor.RadzenDataGridColumn TItem="WebHookClientModel" Property="Name" Filterable="true" Title="Name" TextAlign="TextAlign.Center">
                    <Template>
                        @context.Name
                    </Template>
                    <EditTemplate Context="client">
                        <RadzenTextBox @bind-Value="client.Name" Style="width: 100%"/>
                    </EditTemplate>
                </Radzen.Blazor.RadzenDataGridColumn>
                <Radzen.Blazor.RadzenDataGridColumn TItem="WebHookClientModel" Filterable="false" Title="BaseUri" TextAlign="TextAlign.Center">
                    <Template>
                        @context.BaseUri?.ToString()
                    </Template>
                    <EditTemplate Context="client">
                        <RadzenTextBox @bind-Value="client.UriStr" Style="width: 100%"/>
                    </EditTemplate>
                </Radzen.Blazor.RadzenDataGridColumn>
                <Radzen.Blazor.RadzenDataGridColumn TItem="WebHookClientModel" Filterable="true" Title="Secret" TextAlign="TextAlign.Center">
                    <Template>
                        @("<SET>")
                    </Template>
                    <EditTemplate Context="client">
                        @if (client.Id is not null)
                        {
                            <RadzenText Text="Regenerate:"/>
                            <RadzenCheckBox @bind-Value="client.UpdateSecret"/>
                        }
                    </EditTemplate>
                </Radzen.Blazor.RadzenDataGridColumn>
                <Radzen.Blazor.RadzenDataGridColumn TItem="WebHookClientModel" Filterable="true" Title="Test" TextAlign="TextAlign.Center">
                    <Template Context="client">
                        <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="info" Class="m-1" IsBusy="client.TestPending" BusyText="Testing..." Click="@(() => TestClient(client))" Text="Test"/>
                    </Template>
                    <EditTemplate>
                    </EditTemplate>
                </Radzen.Blazor.RadzenDataGridColumn>
                <Radzen.Blazor.RadzenDataGridColumn TItem="WebHookClientModel" Context="controlContext"
                                                    Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px">
                    <Template Context="row">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(_ => EditRow(row))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="row">
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@(_ => SaveRow(row))">
                        </RadzenButton>
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(_ => CancelEdit(row))">
                        </RadzenButton>
                    </EditTemplate>
                </Radzen.Blazor.RadzenDataGridColumn>
                <Radzen.Blazor.RadzenDataGridColumn TItem="WebHookClientModel" Context="controlContext"
                                                    Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
                    <Template Context="row">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Class="m-1" Click="@(_ => DeleteRow(row))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="row">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Class="m-1" Click="@(_ => DeleteRow(row))">
                        </RadzenButton>
                    </EditTemplate>
                </Radzen.Blazor.RadzenDataGridColumn>

            </Columns>
        </RadzenDataGrid>
    </div>

    <div class="d-flex flex-row p-2">
        <div class="col-4">
            <h1 class="align-middle">Web Hook Definitions</h1>
        </div>
        <div class="col-6"></div>
        <div class="col-2 p-2">
            <RadzenButton Text="Add Web Hook" Click="AddWebHook" class="float-end"/>
        </div>
    </div>

    @foreach (var webHook in WebHookFacade.WebHooks)
    {
        <div class="d-flex flex-row p-2">
            <RadzenCard Style="width: 100%">
                <div class="d-flex flex-row-reverse p-3">
                    <div>
                        <RadzenButton Click="@(args => DeleteWebHook(webHook))" Icon="delete"
                                      ButtonStyle="ButtonStyle.Danger"/>
                    </div>
                    <div class="px-1 @(webHook.IsInEditMode ? "collapse" : "")">
                        <RadzenButton Click="@(_ => webHook.Edit())" Disabled="false" Icon="edit"
                                      ButtonStyle="ButtonStyle.Light"/>
                    </div>
                    <div class="px-1 @(!webHook.IsInEditMode ? "collapse" : "")">
                        <RadzenButton Click="@(args => SaveWebHook(webHook))" Disabled="false" Icon="check"
                                      ButtonStyle="ButtonStyle.Primary"/>
                    </div>
                </div>

                <div class="d-flex flex-row">
                    <div class="col-2 align-middle">
                        <RadzenText Text="Client:" class="text-end"/>
                    </div>
                    <div class="col-4">
                        <RadzenDropDown AllowClear="false" TValue="Guid"
                                        Data="@WebHookFacade.WebHookClients"
                                        TextProperty="Name" ValueProperty="Id"
                                        @bind-Value="webHook.ClientId"
                                        Disabled="@(!webHook.IsInEditMode)" Style="width: 100%"/>
                    </div>

                    <div class="col-2 align-middle">
                        <RadzenText Text="Event:" class="text-end"/>
                    </div>

                    <div class="col-4">
                        <RadzenDropDown AllowClear="false" TValue="WebHookType"
                                        Data="@WebHookTypes"
                                        TextProperty="EnumName" ValueProperty="EnumValue"
                                        @bind-Value="webHook.WebHookType"
                                        Disabled="@(!webHook.IsInEditMode)" Style="width: 100%"/>
                    </div>


                </div>
                <div class="d-flex flex-row mt-1">
                    <div class="col-2 align-middle">
                        <RadzenText Text="Setting Client Regex:" class="text-end"/>
                    </div>
                    <div class="col-4">
                        <RadzenTextBox @bind-Value="webHook.ClientNameRegex"
                                       Disabled="@(!webHook.IsInEditMode)" Style="width: 100%"/>
                    </div>
                    <div class="col-2 align-middle @(webHook.WebHookType != WebHookType.SettingValueChanged ? "collapse" : "")">
                        <RadzenText Text="Setting Name Regex:" class="text-end"/>
                    </div>

                    <div class="col-4 @(webHook.WebHookType != WebHookType.SettingValueChanged ? "collapse" : "")">
                        <RadzenTextBox @bind-Value="webHook.SettingNameRegex"
                                       Disabled="@(!webHook.IsInEditMode)" Style="width: 100%"/>
                    </div>
                    <div class="col-2 align-middle @(webHook.WebHookType != WebHookType.MinRunSessions ? "collapse" : "")">
                        <RadzenText Text="Minimum Running:" class="text-end"/>
                    </div>
                    <div class="col-4 @(webHook.WebHookType != WebHookType.MinRunSessions ? "collapse" : "")">
                        <RadzenNumeric @bind-Value="webHook.MinSessions" TValue="int"
                                       Disabled="@(!webHook.IsInEditMode)" Style="width: 100%"/>
                    </div>

                </div>
                <div class="d-flex flex-row m-4">
                    <RadzenText Text="@webHook.MatchingClients.Summary"/>
                    <a class="pl-1" href="" @onclick="@(() => webHook.ShowMatchDetails())" @onclick:preventDefault>Details</a>
                </div>
                @if (webHook.AreMatchDetailsVisible)
                {
                    <div class="d-flex flex-row m-4">
                        <RadzenDataGrid AllowFiltering="false" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="3" AllowPaging="true"
                                        Data="webHook.MatchingClients.Matches" TItem="MatchingClientModel" ColumnWidth="300px">
                            <Columns>
                                <Radzen.Blazor.RadzenDataGridColumn TItem="MatchingClientModel" Property="Client" Title="Client" Frozen="true" Width="100px"/>
                                <Radzen.Blazor.RadzenDataGridColumn TItem="MatchingClientModel" Property="Setting" Title="Setting" Frozen="true" Width="100px"/>
                            </Columns>
                        </RadzenDataGrid>
                    </div>
                }
            </RadzenCard>
        </div>
    }
</div>

@code {

    async Task ShowCloseableFromOverlayDialog(string heading, string message)
    {
        await DialogService.OpenAsync(heading, ds =>
            @<div>
                <p style="white-space: pre-line">@message</p>
            </div>, new DialogOptions { CloseDialogOnOverlayClick = true });
    }

    async Task ShowTestResultDialog(WebHookClientTestResultsDataContract result)
    {
        await DialogService.OpenAsync($"Test Results for {result.ClientName}", ds =>
            @<div>
                <RadzenDataGrid AllowColumnResize="true" Data="@result.Results" TItem="TestResultDataContract">
                    <Columns>
                        <Radzen.Blazor.RadzenDataGridColumn TItem="TestResultDataContract" Width="150px" Property="WebHookType" Title="Type" TextAlign="TextAlign.Center" SortOrder="SortOrder.Descending"/>
                        <Radzen.Blazor.RadzenDataGridColumn TItem="TestResultDataContract" Width="50px" Property="Result" Title="Result" TextAlign="TextAlign.Center"/>
                        <Radzen.Blazor.RadzenDataGridColumn TItem="TestResultDataContract" Width="75px" Property="StatusCode" Title="Status Code" TextAlign="TextAlign.Center"/>
                        <Radzen.Blazor.RadzenDataGridColumn TItem="TestResultDataContract" Width="150px" Property="Message" Title="Message" TextAlign="TextAlign.Center"/>
                        <Radzen.Blazor.RadzenDataGridColumn TItem="TestResultDataContract" Width="100px" Property="TestDuration" Title="Duration" TextAlign="TextAlign.Center"/>
                    </Columns>
                </RadzenDataGrid>
            </div>, new DialogOptions { Resizable = true, Width = "70%" });
    }

    async Task<bool> GetDeleteConfirmation(string clientName)
    {
        return await DialogService.OpenAsync("Confirm Delete", ds =>
            @<div>
                <p class="mb-4">Are you sure you want to delete '@clientName'</p>
                <div class="row">
                    <div class="col">
                        <RadzenButton Text="Yes" Click="() => ds.Close(true)" Class="mr-1" Style="width: 80px;"/>
                        <RadzenButton Text="No" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Class="mr-1"/>
                    </div>
                </div>
            </div>);
    }

}