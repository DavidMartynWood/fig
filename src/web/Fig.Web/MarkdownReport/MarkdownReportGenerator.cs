using System.Text;
using Fig.Contracts.ExtensionMethods;
using Fig.Contracts.ImportExport;
using Fig.Web.ExtensionMethods;
using Fig.Web.Facades;
using Fig.Web.Services;
using Microsoft.Extensions.Options;

namespace Fig.Web.MarkdownReport;

public class MarkdownReportGenerator : IMarkdownReportGenerator
{
    private readonly IOptions<WebSettings> _settings;
    private readonly IClientStatusFacade _clientStatusFacade;
    private readonly IAccountService _accountService;

    public MarkdownReportGenerator(IOptions<WebSettings> settings, IClientStatusFacade clientStatusFacade, IAccountService accountService)
    {
        _settings = settings;
        _clientStatusFacade = clientStatusFacade;
        _accountService = accountService;
    }
    
    public string GenerateReport(FigDataExportDataContract export, bool maskSecrets)
    {
        var builder = new StringBuilder();

        builder.AddHeading(1, "Fig Report");
        builder.AddProperty("Created", export.ExportedAt.ToString("f"));
        builder.AddProperty("Environment", _settings.Value.Environment);
        builder.AddProperty("Generated By", _accountService.AuthenticatedUser?.Username);
        builder.AppendLine();
        builder.AddHeading(2, "Summary");
        builder.AddProperty("Clients", export.Clients.Count.ToString());
        builder.AddProperty("Settings", export.Clients.SelectMany(a => a.Settings).Count().ToString());
        builder.AddProperty("Running Instances", _clientStatusFacade.ClientRunSessions.Count.ToString());
        
        builder.AddHeading(2, "Versions");
        var versions = _clientStatusFacade.ClientRunSessions
            .Select(a => new RunningVersions(a.Name, a.ApplicationVersion, a.FigVersion))
            .ToList();
        if (versions.Any())
            builder.AddTable(versions);
        else
            builder.AppendLine("No running clients");

        builder.AddHeading(2, "Client Settings");

        foreach (var client in export.Clients)
        {
            builder.AddLink(client.Name);
            builder.AppendLine();
        }

        foreach (var client in export.Clients)
        {
            builder.AppendLine(CreateClient(client, maskSecrets));
            builder.AppendLine();
            builder.AppendLine();
        }

        if (_clientStatusFacade.ClientRunSessions.Any())
        {
            builder.AddHeading(2, "Running Clients");
            var running = _clientStatusFacade.ClientRunSessions.Select(a => 
                new RunSession(a.Name, a.Instance,
                    a.LastSettingValueUpdate, 
                    a.UptimeSeconds, 
                    a.IpAddress, 
                    a.Hostname, 
                    a.OfflineSettingsEnabled,
                    a.RunningUser,
                    a.MemoryUsageBytes, 
                    a.HasConfigurationError)).ToList();
            builder.AddTable(running);
        }

        builder.AppendLine();
        builder.AddHeading(2, "Client Documentation");

        foreach (var client in export.Clients)
        {
            if (!client.Description.Trim('#').StartsWith(client.Name))
            {
                builder.AddHeading(3, client.Name);
            }

            builder.AddParagraph(string.IsNullOrWhiteSpace(client.Description)
                ? "No description provided."
                : client.Description);

            builder.AddLine();
        }

        return builder.ToString();
    }

    private string CreateClient(SettingClientExportDataContract client, bool maskSecrets)
    {
        var builder = new StringBuilder();

        builder.AddAnchor(client.Name);
        builder.AddHeading(3, client.Name);
        if (client.Instance != null)
        {
            builder.AddProperty("Instance", client.Instance);
            builder.AppendLine();
        }

        foreach (var setting in client.Settings.OrderBy(a => a.DisplayOrder).ThenBy(a => a.Name))
        {
            builder.AppendLine(CreateSetting(setting, maskSecrets));
            builder.AppendLine();
        }

        builder.AddLine();
        return builder.ToString();
    }

    private string CreateSetting(SettingExportDataContract setting, bool maskSecrets)
    {
        var builder = new StringBuilder();
        var propertyType = setting.ValueType.FigPropertyType();
        builder.AddHeading(4, $"<u>{setting.Name}</u>");
        builder.AddParagraph(setting.Description);
        builder.AddProperty("Type", propertyType.ToString());

        if (setting.DefaultValue != null)
        {
            builder.AddPropertyValue(setting, true);
        }

        if (setting.IsSecret && maskSecrets)
            builder.AddProperty("Current Value", "******");
        else
            builder.AddPropertyValue(setting, false);

        builder.AppendLine();
        return builder.ToString();
    }
}