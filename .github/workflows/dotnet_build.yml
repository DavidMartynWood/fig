# The name of the workflow.
# This is the name that's displayed for status
# badges (commonly embedded in README.md files).
name: build and test

# Trigger this workflow on a push, or pull request to
# the main branch, when either C# or project files changed
on:
  push:
  pull_request:
    branches: [ main ]
    paths-ignore:
    - 'README.md'

# Create an environment variable named DOTNET_VERSION
# and set it as "7.0.x"
env:
  DOTNET_VERSION: '7.0.x' # The .NET SDK version to use

# Defines a single job named "build-and-test"
jobs:
  build-and-test:

    # When the workflow runs, this is the name that is logged
    # This job will run three times, once for each "os" defined
    name: build-and-test-${{matrix.os}}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #os: [ubuntu-latest, windows-latest, macOS-latest]
        os: [windows-latest]

    # Each job run contains these five steps
    steps:

    # 1) Check out the source code so that the workflow can access it.
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # 2) Set up the .NET CLI environment for the workflow to use.
    #    The .NET version is specified by the environment variable.
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # 3) Restore the dependencies and tools of a project or solution.
    - name: Install dependencies
      run: dotnet restore ./src

    # 4) Build a project or solution and all of its dependencies.
    - name: Build
      run: dotnet build --configuration Release --no-restore ./src

    # 5) Test a project or solution.
    - name: Test
      run: dotnet test --no-restore --verbosity normal --logger "trx;LogFileName=test-results.trx" ./src 

    # 6) Create a report that can be used to review the test results
    - name: Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: TestResults
        path: "**/test-results.trx"                            
        reporter: dotnet-trx
        fail-on-error: true
      
    # 7) Install and execute OpenCover for coverage report
    - name: install OpenCover
      run: choco install opencover.portable
      
    - name: Execute OpenCover
      run: |
        $solutionPath = "$(Get-Location)\src\fig.sln"
        $filters = "+[*]* -[Fig*test*]*"
        $openCoveragePath = "OpenCover.Console.exe"
        $targetExe = "dotnet.exe"
        $targetArgs = "test $solutionPath"
        $outputFolder = "$(Get-Location)\Coverage"
        $outputXmlPath = "$outputFolder\coverage.xml"
        New-Item $outputFolder -type Directory -Force
        &$openCoveragePath -register:user `
                            -target:$targetExe `
                            -targetargs:$targetArgs `
                            -filter:$filters `
                            -oldstyle `
                            -output:$outputXmlPath
        
    - name: Send coverage result to codecov
      uses: codecov/codecov-action@v2
      with:
        files: .\Coverage\coverage.xml
    
    - name: Publish Api
      run: dotnet publish ./src/api/Fig.Api/Fig.Api.csproj --runtime win-x64 --configuration Release --self-contained true -p:PublishSingleFile=true -p:PublishedTrimmed=true -p:IncludeAllContentForSelfExtract=true

    - name: Upload Api Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: Fig_Api
        path: D:\a\fig\fig\src\api\Fig.Api\bin\Release\net7.0\win-x64\publish\

    - name: Publish Web
      run: dotnet publish ./src/web/Fig.Web/Fig.Web.csproj --runtime win-x64 --configuration Release --self-contained true -p:PublishedTrimmed=true -p:IncludeAllContentForSelfExtract=true

    - name: Upload Web Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: Fig_Web
        path: D:\a\fig\fig\src\web\Fig.Web\bin\Release\net7.0\publish\
